from snakes.nets import *
from dfs_pn import *

def get_net():
    net = PetriNet('TTT')
    net.add_place(Place('init', [1]))
    net.add_place(Place('turnX', [0]))
    net.add_place(Place('turnO', [0]))
    net.add_place(Place('0,0', [1]))
    net.add_place(Place('0,1', [1]))
    net.add_place(Place('0,2', [1]))
    net.add_place(Place('1,0', [1]))
    net.add_place(Place('1,1', [1]))
    net.add_place(Place('1,2', [1]))
    net.add_place(Place('2,0', [1]))
    net.add_place(Place('2,1', [1]))
    net.add_place(Place('2,2', [1]))

    net.add_transition(Transition('begin', Expression('x>=1 and y>=0')))
    net.add_input('init', 'begin', Variable('x'))
    net.add_output('init', 'begin', Expression('x-1'))
    net.add_output('turnX', 'begin', Expression('y+1'))
    net.add_input('turnX', 'begin', Variable('y'))

    net.add_transition(Transition('X,0,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,0,0', Variable('x'))
    net.add_output('turnX', 'X,0,0', Expression('x-1'))
    net.add_input('0,0', 'X,0,0', Variable('y'))
    net.add_output('0,0', 'X,0,0', Expression('y-1'))
    net.add_output('turnO', 'X,0,0', Expression('z+1'))
    net.add_input('turnO', 'X,0,0', Variable('z'))

    net.add_transition(Transition('X,0,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,0,1', Variable('x'))
    net.add_output('turnX', 'X,0,1', Expression('x-1'))
    net.add_input('0,1', 'X,0,1', Variable('y'))
    net.add_output('0,1', 'X,0,1', Expression('y-1'))
    net.add_output('turnO', 'X,0,1', Expression('z+1'))
    net.add_input('turnO', 'X,0,1', Variable('z'))

    net.add_transition(Transition('X,0,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,0,2', Variable('x'))
    net.add_output('turnX', 'X,0,2', Expression('x-1'))
    net.add_input('0,2', 'X,0,2', Variable('y'))
    net.add_output('0,2', 'X,0,2', Expression('y-1'))
    net.add_output('turnO', 'X,0,2', Expression('z+1'))
    net.add_input('turnO', 'X,0,2', Variable('z'))

    net.add_transition(Transition('X,1,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,1,0', Variable('x'))
    net.add_output('turnX', 'X,1,0', Expression('x-1'))
    net.add_input('1,0', 'X,1,0', Variable('y'))
    net.add_output('1,0', 'X,1,0', Expression('y-1'))
    net.add_output('turnO', 'X,1,0', Expression('z+1'))
    net.add_input('turnO', 'X,1,0', Variable('z'))

    net.add_transition(Transition('X,1,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,1,1', Variable('x'))
    net.add_output('turnX', 'X,1,1', Expression('x-1'))
    net.add_input('1,1', 'X,1,1', Variable('y'))
    net.add_output('1,1', 'X,1,1', Expression('y-1'))
    net.add_output('turnO', 'X,1,1', Expression('z+1'))
    net.add_input('turnO', 'X,1,1', Variable('z'))

    net.add_transition(Transition('X,1,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,1,2', Variable('x'))
    net.add_output('turnX', 'X,1,2', Expression('x-1'))
    net.add_input('1,2', 'X,1,2', Variable('y'))
    net.add_output('1,2', 'X,1,2', Expression('y-1'))
    net.add_output('turnO', 'X,1,2', Expression('z+1'))
    net.add_input('turnO', 'X,1,2', Variable('z'))

    net.add_transition(Transition('X,2,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,2,0', Variable('x'))
    net.add_output('turnX', 'X,2,0', Expression('x-1'))
    net.add_input('2,0', 'X,2,0', Variable('y'))
    net.add_output('2,0', 'X,2,0', Expression('y-1'))
    net.add_output('turnO', 'X,2,0', Expression('z+1'))
    net.add_input('turnO', 'X,2,0', Variable('z'))

    net.add_transition(Transition('X,2,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,2,1', Variable('x'))
    net.add_output('turnX', 'X,2,1', Expression('x-1'))
    net.add_input('2,1', 'X,2,1', Variable('y'))
    net.add_output('2,1', 'X,2,1', Expression('y-1'))
    net.add_output('turnO', 'X,2,1', Expression('z+1'))
    net.add_input('turnO', 'X,2,1', Variable('z'))

    net.add_transition(Transition('X,2,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnX', 'X,2,2', Variable('x'))
    net.add_output('turnX', 'X,2,2', Expression('x-1'))
    net.add_input('2,2', 'X,2,2', Variable('y'))
    net.add_output('2,2', 'X,2,2', Expression('y-1'))
    net.add_output('turnO', 'X,2,2', Expression('z+1'))
    net.add_input('turnO', 'X,2,2', Variable('z'))

    net.add_transition(Transition('O,0,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,0,0', Variable('x'))
    net.add_output('turnO', 'O,0,0', Expression('x-1'))
    net.add_input('0,0', 'O,0,0', Variable('y'))
    net.add_output('0,0', 'O,0,0', Expression('y-1'))
    net.add_output('turnX', 'O,0,0', Expression('z+1'))
    net.add_input('turnX', 'O,0,0', Variable('z'))

    net.add_transition(Transition('O,0,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,0,1', Variable('x'))
    net.add_output('turnO', 'O,0,1', Expression('x-1'))
    net.add_input('0,1', 'O,0,1', Variable('y'))
    net.add_output('0,1', 'O,0,1', Expression('y-1'))
    net.add_output('turnX', 'O,0,1', Expression('z+1'))
    net.add_input('turnX', 'O,0,1', Variable('z'))

    net.add_transition(Transition('O,0,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,0,2', Variable('x'))
    net.add_output('turnO', 'O,0,2', Expression('x-1'))
    net.add_input('0,2', 'O,0,2', Variable('y'))
    net.add_output('0,2', 'O,0,2', Expression('y-1'))
    net.add_output('turnX', 'O,0,2', Expression('z+1'))
    net.add_input('turnX', 'O,0,2', Variable('z'))

    net.add_transition(Transition('O,1,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,1,0', Variable('x'))
    net.add_output('turnO', 'O,1,0', Expression('x-1'))
    net.add_input('1,0', 'O,1,0', Variable('y'))
    net.add_output('1,0', 'O,1,0', Expression('y-1'))
    net.add_output('turnX', 'O,1,0', Expression('z+1'))
    net.add_input('turnX', 'O,1,0', Variable('z'))

    net.add_transition(Transition('O,1,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,1,1', Variable('x'))
    net.add_output('turnO', 'O,1,1', Expression('x-1'))
    net.add_input('1,1', 'O,1,1', Variable('y'))
    net.add_output('1,1', 'O,1,1', Expression('y-1'))
    net.add_output('turnX', 'O,1,1', Expression('z+1'))
    net.add_input('turnX', 'O,1,1', Variable('z'))

    net.add_transition(Transition('O,1,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,1,2', Variable('x'))
    net.add_output('turnO', 'O,1,2', Expression('x-1'))
    net.add_input('1,2', 'O,1,2', Variable('y'))
    net.add_output('1,2', 'O,1,2', Expression('y-1'))
    net.add_output('turnX', 'O,1,2', Expression('z+1'))
    net.add_input('turnX', 'O,1,2', Variable('z'))

    net.add_transition(Transition('O,2,0', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,2,0', Variable('x'))
    net.add_output('turnO', 'O,2,0', Expression('x-1'))
    net.add_input('2,0', 'O,2,0', Variable('y'))
    net.add_output('2,0', 'O,2,0', Expression('y-1'))
    net.add_output('turnX', 'O,2,0', Expression('z+1'))
    net.add_input('turnX', 'O,2,0', Variable('z'))

    net.add_transition(Transition('O,2,1', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,2,1', Variable('x'))
    net.add_output('turnO', 'O,2,1', Expression('x-1'))
    net.add_input('2,1', 'O,2,1', Variable('y'))
    net.add_output('2,1', 'O,2,1', Expression('y-1'))
    net.add_output('turnX', 'O,2,1', Expression('z+1'))
    net.add_input('turnX', 'O,2,1', Variable('z'))

    net.add_transition(Transition('O,2,2', Expression('x>=1 and y>=1 and z>=0')))
    net.add_input('turnO', 'O,2,2', Variable('x'))
    net.add_output('turnO', 'O,2,2', Expression('x-1'))
    net.add_input('2,2', 'O,2,2', Variable('y'))
    net.add_output('2,2', 'O,2,2', Expression('y-1'))
    net.add_output('turnX', 'O,2,2', Expression('z+1'))
    net.add_input('turnX', 'O,2,2', Variable('z'))

    return net

if __name__ == "__main__":
    graph, initial_state = run_dfs_pn(get_net())
    write_xml(graph, initial_state, "exports/tic_tac_toe.xml")